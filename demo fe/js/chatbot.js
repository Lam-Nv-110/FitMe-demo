// Chatbot functionality v·ªõi suggestions
document.addEventListener('DOMContentLoaded', function() {
    initChatbot();
});

function initChatbot() {
    const chatbotIcon = document.getElementById('chatbotIcon');
    const chatbotWindow = document.getElementById('chatbotWindow');
    const closeChatbot = document.getElementById('closeChatbot');
    const sendMessageBtn = document.getElementById('sendMessage');
    const chatbotInput = document.getElementById('chatbotInput');
    const chatbotMessages = document.getElementById('chatbotMessages');
    const suggestionButtons = document.querySelectorAll('.suggestion-btn');

    // Toggle chatbot window
    if (chatbotIcon && chatbotWindow) {
        chatbotIcon.addEventListener('click', function() {
            chatbotWindow.classList.toggle('active');
        });
        
        // Close chatbot
        if (closeChatbot) {
            closeChatbot.addEventListener('click', function() {
                chatbotWindow.classList.remove('active');
            });
        }
        
        // Send message
        if (sendMessageBtn && chatbotInput) {
            sendMessageBtn.addEventListener('click', sendMessage);
            
            chatbotInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    sendMessage();
                }
            });
        }

        // Suggestion buttons
        suggestionButtons.forEach(button => {
            button.addEventListener('click', function() {
                const eventType = this.getAttribute('data-event');
                handleSuggestion(eventType);
            });
        });
    }
}

function handleSuggestion(eventType) {
    const response = getSuggestionResponse(eventType);
    
    // Th√™m tin nh·∫Øn user
    addMessage(getUserQuestion(eventType), 'user');
    
    // Th√™m tin nh·∫Øn bot v·ªõi delay
    setTimeout(() => {
        addMessage(response.advice, 'bot');
        
        // Th√™m outfit suggestions
        if (response.outfits && response.outfits.length > 0) {
            addOutfitSuggestions(response.outfits, response.action);
        }
    }, 1000);
}

function getSuggestionResponse(eventType) {
    const responses = {
        'interview': {
            advice: 'üíº **Ph·ªèng v·∫•n c√¥ng s·ªü:**\n‚Ä¢ √Åo s∆° mi tr·∫Øng/xanh than\n‚Ä¢ Qu·∫ßn t√¢y ƒëen/x√°m\n‚Ä¢ Blazer (t√πy ng√†nh)\n‚Ä¢ Gi√†y da l·ªãch s·ª±\n‚Ä¢ M√†u trung t√≠nh th·ªÉ hi·ªán s·ª± chuy√™n nghi·ªáp',
            outfits: ['√Åo Blazer Navy', '√Åo s∆° mi tr·∫Øng', 'Qu·∫ßn t√¢y x√°m'],
            action: 'professional'
        },
        'date': {
            advice: 'üíñ **H·∫πn h√≤ l√£ng m·∫°n:**\n‚Ä¢ ƒê·∫ßm body/d√°ng A pastel\n‚Ä¢ √Åo croptop + ch√¢n v√°y x√≤e\n‚Ä¢ Ph·ª• ki·ªán tinh t·∫ø (v√≤ng c·ªï, hoa tai)\n‚Ä¢ Gi√†y sandal/gi√†y cao g√≥t th·∫•p\n‚Ä¢ M√†u h·ªìng, tr·∫Øng, ƒë·ªè th·ªÉ hi·ªán s·ª± n·ªØ t√≠nh',
            outfits: ['ƒê·∫ßm body ƒëen', '√Åo croptop', 'Ch√¢n v√°y x√≤e'],
            action: 'romantic'
        },
        'party': {
            advice: 'üéâ **Ti·ªác t·ªëi sang tr·ªçng:**\n‚Ä¢ ƒê·∫ßm sequin/d·∫° h·ªôi\n‚Ä¢ Jumpsuit satin\n‚Ä¢ √Åo glitter + qu·∫ßn ·ªëng r·ªông\n‚Ä¢ Ph·ª• ki·ªán kim lo·∫°i n·ªïi b·∫≠t\n‚Ä¢ Gi√†y cao g√≥t, clutch nh·ªè\n‚Ä¢ M√†u ƒëen, ƒë·ªè, kim tuy·∫øn',
            outfits: ['ƒê·∫ßm sequin', 'Jumpsuit satin', '√Åo glitter'],
            action: 'party'
        },
        'casual': {
            advice: 'üëñ **D·∫°o ph·ªë tho·∫£i m√°i:**\n‚Ä¢ √Åo thun/√°o ph√¥ng basic\n‚Ä¢ Jeans/qu·∫ßn short\n‚Ä¢ Sneakers/gi√†y th·ªÉ thao\n‚Ä¢ √Åo kho√°c denim/hoodie\n‚Ä¢ M≈© l∆∞·ª°i trai, t√∫i ƒëeo ch√©o\n‚Ä¢ M√†u s·∫Øc t∆∞∆°i s√°ng, tho·∫£i m√°i',
            outfits: ['√Åo thun basic', 'Qu·∫ßn jeans', '√Åo kho√°c denim'],
            action: 'casual'
        },
        'travel': {
            advice: '‚úàÔ∏è **Du l·ªãch ti·ªán l·ª£i:**\n‚Ä¢ √Åo thun co gi√£n\n‚Ä¢ Qu·∫ßn jogger/leggings\n‚Ä¢ Gi√†y th·ªÉ thao √™m √°i\n‚Ä¢ √Åo kho√°c nh·∫π, khƒÉn cho√†ng\n‚Ä¢ Balo, m≈© r·ªông v√†nh\n‚Ä¢ Ch·∫•t li·ªáu tho√°ng m√°t, d·ªÖ gi·∫∑t',
            outfits: ['√Åo thun co gi√£n', 'Qu·∫ßn jogger', '√Åo kho√°c nh·∫π'],
            action: 'travel'
        },
        'wedding': {
            advice: 'üë∞ **ƒê√°m c∆∞·ªõi trang tr·ªçng:**\n‚Ä¢ ƒê·∫ßm midi/d√†i pastel\n‚Ä¢ √Åo blazer + v√°y b√∫t ch√¨\n‚Ä¢ Ph·ª• ki·ªán ng·ªçc trai\n‚Ä¢ Gi√†y cao g√≥t, t√∫i c·∫ßm tay\n‚Ä¢ M√†u xanh pastel, h·ªìng nh·∫°t, be\n‚Ä¢ Tr√°nh m√†u tr·∫Øng/ƒë·ªè',
            outfits: ['ƒê·∫ßm midi', '√Åo blazer', 'V√°y b√∫t ch√¨'],
            action: 'formal'
        },
        'hot': {
            advice: '‚òÄÔ∏è **Th·ªùi ti·∫øt n√≥ng b·ª©c:**\n‚Ä¢ √Åo thun cotton, linen\n‚Ä¢ Qu·∫ßn short, v√°y maxi\n‚Ä¢ Sandal, gi√†y th·ªÉ thao tho√°ng\n‚Ä¢ M≈© r·ªông v√†nh, k√≠nh m√°t\n‚Ä¢ M√†u s√°ng (tr·∫Øng, pastel)\n‚Ä¢ Ch·∫•t li·ªáu tho√°ng kh√≠',
            outfits: ['√Åo thun cotton', 'Qu·∫ßn short', 'V√°y maxi'],
            action: 'summer'
        },
        'cold': {
            advice: '‚ùÑÔ∏è **Th·ªùi ti·∫øt l·∫°nh gi√°:**\n‚Ä¢ √Åo len c·ªï l·ªç/cao c·ªï\n‚Ä¢ Qu·∫ßn jeans/qu·∫ßn t√¢y d√†y\n‚Ä¢ √Åo kho√°c d·∫°, parka\n‚Ä¢ Boots, gi√†y k√≠n\n‚Ä¢ KhƒÉn cho√†ng, gƒÉng tay\n‚Ä¢ Layer nhi·ªÅu l·ªõp m·ªèng',
            outfits: ['√Åo len c·ªï l·ªç', '√Åo kho√°c d·∫°', 'Qu·∫ßn jeans'],
            action: 'winter'
        },
        'rain': {
            advice: 'üåßÔ∏è **Tr·ªùi m∆∞a ·∫©m ∆∞·ªõt:**\n‚Ä¢ √Åo kho√°c ch·ªëng th·∫•m\n‚Ä¢ Qu·∫ßn nhanh kh√¥\n‚Ä¢ Boots/gi√†y kh√¥ng th·∫•m\n‚Ä¢ √î, m≈© c√≥ v√†nh\n‚Ä¢ M√†u t·ªëi (ƒëen, x√°m, navy)\n‚Ä¢ Ch·∫•t li·ªáu nhanh kh√¥',
            outfits: ['√Åo kho√°c m∆∞a', 'Qu·∫ßn nhanh kh√¥', 'Boots'],
            action: 'rainy'
        }
    };
    
    return responses[eventType] || {
        advice: 'Xin l·ªói, t√¥i ch∆∞a c√≥ g·ª£i √Ω cho d·ªãp n√†y. H√£y th·ª≠ ch·ªçn m·ªôt d·ªãp kh√°c!',
        outfits: [],
        action: 'general'
    };
}

function getUserQuestion(eventType) {
    const questions = {
        'interview': 'T√¥i n√™n m·∫∑c g√¨ ƒëi ph·ªèng v·∫•n?',
        'date': 'ƒê·ªì h·∫πn h√≤ n√™n m·∫∑c th·∫ø n√†o?',
        'party': 'G·ª£i √Ω ƒë·ªì ƒëi ti·ªác t·ªëi',
        'casual': 'Phong c√°ch d·∫°o ph·ªë casual',
        'travel': 'ƒê·ªì du l·ªãch ti·ªán l·ª£i',
        'wedding': 'M·∫∑c g√¨ ƒëi ƒë√°m c∆∞·ªõi?',
        'hot': 'Tr·ªùi n√≥ng m·∫∑c g√¨ cho m√°t?',
        'cold': 'Tr·ªùi l·∫°nh n√™n m·∫∑c g√¨?',
        'rain': 'ƒê·ªì ƒëi m∆∞a th·∫ø n√†o?'
    };
    
    return questions[eventType] || 'T√¥i c·∫ßn g·ª£i √Ω trang ph·ª•c';
}

function addOutfitSuggestions(outfits, action) {
    const messagesContainer = document.getElementById('chatbotMessages');
    
    const suggestionsDiv = document.createElement('div');
    suggestionsDiv.className = 'outfit-suggestions';
    
    suggestionsDiv.innerHTML = `
        <div class="suggestion-header">
            <strong>üéØ G·ª£i √Ω trang ph·ª•c ph√π h·ª£p:</strong>
        </div>
        <div class="outfit-list">
            ${outfits.map(outfit => `
                <div class="outfit-item-suggestion" data-outfit="${outfit}">
                    <i class="fas fa-tshirt"></i>
                    <span>${outfit}</span>
                </div>
            `).join('')}
        </div>
        <div class="suggestion-actions">
            <button class="action-btn try-on-btn" data-action="${action}">
                <i class="fas fa-magic"></i>
                Th·ª≠ ƒë·ªì ngay
            </button>
            <button class="action-btn shop-btn" data-action="${action}">
                <i class="fas fa-shopping-bag"></i>
                Mua s·∫Øm
            </button>
        </div>
    `;
    
    messagesContainer.appendChild(suggestionsDiv);
    
    // Th√™m event listeners
    const tryOnBtn = suggestionsDiv.querySelector('.try-on-btn');
    const shopBtn = suggestionsDiv.querySelector('.shop-btn');
    
    if (tryOnBtn) {
        tryOnBtn.addEventListener('click', function() {
            scrollToSection('ai-tryon');
            addMessage('Tuy·ªát! H√£y ƒë·∫øn ph·∫ßn th·ª≠ ƒë·ªì AI ƒë·ªÉ tr·∫£i nghi·ªám ngay! üéØ', 'bot');
        });
    }
    
    if (shopBtn) {
        shopBtn.addEventListener('click', function() {
            scrollToSection('shopping');
            addMessage('ƒê·∫øn c·ª≠a h√†ng ngay! T√¥i s·∫Ω g·ª£i √Ω s·∫£n ph·∫©m ph√π h·ª£p üõçÔ∏è', 'bot');
        });
    }
    
    // Cu·ªôn xu·ªëng cu·ªëi
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

// Gi·ªØ nguy√™n c√°c h√†m c≈©
function sendMessage() {
    const chatbotInput = document.getElementById('chatbotInput');
    const chatbotMessages = document.getElementById('chatbotMessages');
    
    if (!chatbotInput || !chatbotMessages) return;
    
    const message = chatbotInput.value.trim();
    
    if (message === '') return;
    
    addMessage(message, 'user');
    chatbotInput.value = '';
    
    setTimeout(() => {
        const botResponse = generateBotResponse(message);
        addMessage(botResponse, 'bot');
    }, 1000);
}

function addMessage(text, sender) {
    const chatbotMessages = document.getElementById('chatbotMessages');
    
    if (!chatbotMessages) return;
    
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${sender}-message`;
    
    const messageText = document.createElement('p');
    messageText.textContent = text;
    
    messageDiv.appendChild(messageText);
    chatbotMessages.appendChild(messageDiv);
    
    chatbotMessages.scrollTop = chatbotMessages.scrollHeight;
}

function generateBotResponse(userMessage) {
    // Gi·ªØ nguy√™n logic c≈©
    const lowerMessage = userMessage.toLowerCase();
    
    if (lowerMessage.includes('c·∫£m ∆°n')) {
        return 'Kh√¥ng c√≥ g√¨! üòä N·∫øu b·∫°n c·∫ßn th√™m g·ª£i √Ω, h√£y ch·ªçn m·ªôt d·ªãp ·ªü b√™n d∆∞·ªõi nh√©!';
    } else if (lowerMessage.includes('ch√†o')) {
        return 'Xin ch√†o! R·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n. H√£y ch·ªçn m·ªôt d·ªãp ho·∫∑c nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n!';
    } else {
        return 'C·∫£m ∆°n c√¢u h·ªèi c·ªßa b·∫°n! H√£y ch·ªçn m·ªôt d·ªãp c·ª• th·ªÉ ·ªü b√™n d∆∞·ªõi ƒë·ªÉ t√¥i c√≥ th·ªÉ g·ª£i √Ω trang ph·ª•c ph√π h·ª£p nh·∫•t nh√©! üëó';
    }
}

function scrollToSection(sectionId) {
    document.getElementById('chatbotWindow').classList.remove('active');
    setTimeout(() => {
        document.getElementById(sectionId).scrollIntoView({
            behavior: 'smooth'
        });
    }, 500);
}
// Th√™m v√†o file chatbot.js
function toggleSuggestions(showFull = false) {
    const suggestions = document.querySelector('.chatbot-suggestions');
    const messages = document.querySelector('.chatbot-messages');
    
    if (showFull) {
        suggestions.classList.add('visible');
    } else {
        // T·ª± ƒë·ªông ·∫©n 1 ph·∫ßn n·∫øu c√≥ tin nh·∫Øn m·ªõi t·ª´ bot
        const lastMessage = messages.lastElementChild;
        if (lastMessage && lastMessage.classList.contains('bot-message')) {
            suggestions.classList.remove('visible');
        }
    }
}

// G·ªçi h√†m n√†y khi g·ª≠i tin nh·∫Øn ho·∫∑c nh·∫≠n ph·∫£n h·ªìi t·ª´ bot